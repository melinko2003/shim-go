diff --git a/api/go1.24.txt b/api/go1.24.txt
index 05e2006e07..94cc384832 100644
--- a/api/go1.24.txt
+++ b/api/go1.24.txt
@@ -221,3 +221,15 @@ pkg time, method (Time) AppendText([]uint8) ([]uint8, error) #62384
 pkg weak, func Make[$0 interface{}](*$0) Pointer[$0] #67552
 pkg weak, method (Pointer[$0]) Value() *$0 #67552
 pkg weak, type Pointer[$0 interface{}] struct #67552
+pkg crypto/x509, const SHA3_256WithRSA = 17 #69982
+pkg crypto/x509, const SHA3_256WithRSA SignatureAlgorithm #69982
+pkg crypto/x509, const SHA3_384WithRSA = 18 #69982
+pkg crypto/x509, const SHA3_384WithRSA SignatureAlgorithm #69982
+pkg crypto/x509, const SHA3_512WithRSA = 19 #69982
+pkg crypto/x509, const SHA3_512WithRSA SignatureAlgorithm #69982
+pkg crypto/x509, const ECDSAWithSHA3_256 = 20 #69982
+pkg crypto/x509, const ECDSAWithSHA3_256 SignatureAlgorithm #69982
+pkg crypto/x509, const ECDSAWithSHA3_384 = 21 #69982
+pkg crypto/x509, const ECDSAWithSHA3_384 SignatureAlgorithm #69982
+pkg crypto/x509, const ECDSAWithSHA3_512 = 22 #69982
+pkg crypto/x509, const ECDSAWithSHA3_512 SignatureAlgorithm #69982
diff --git a/src/crypto/x509/x509.go b/src/crypto/x509/x509.go
index 2283f6cac3..b797080a15 100644
--- a/src/crypto/x509/x509.go
+++ b/src/crypto/x509/x509.go
@@ -49,6 +49,7 @@ import (
 	_ "crypto/sha1"
 	_ "crypto/sha256"
 	_ "crypto/sha512"
+	_ "crypto/sha3"
 
 	"golang.org/x/crypto/cryptobyte"
 	cryptobyte_asn1 "golang.org/x/crypto/cryptobyte/asn1"
@@ -231,6 +232,12 @@ const (
 	SHA384WithRSAPSS
 	SHA512WithRSAPSS
 	PureEd25519
+	SHA3_256WithRSA
+	SHA3_384WithRSA
+	SHA3_512WithRSA
+	ECDSAWithSHA3_256
+	ECDSAWithSHA3_384
+	ECDSAWithSHA3_512
 )
 
 func (algo SignatureAlgorithm) isRSAPSS() bool {
@@ -340,16 +347,38 @@ var (
 	oidSignatureSHA512WithRSA   = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 13}
 	oidSignatureRSAPSS          = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 10}
 	oidSignatureDSAWithSHA1     = asn1.ObjectIdentifier{1, 2, 840, 10040, 4, 3}
+	// https://oid-base.com/get/2.16.840.1.101.3.4.3
 	oidSignatureDSAWithSHA256   = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 3, 2}
+	// {joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) sigAlgs(3) id-rsassa-pkcs1-v1-5-with-sha3-256(14)}
+	oidSignatureRSAWithSHA3_256 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 3, 14}
+	// {joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) sigAlgs(3) id-rsassa-pkcs1-v1-5-with-sha3-384(15)}
+	oidSignatureRSAWithSHA3_384 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 3, 15}
+	// {joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) sigAlgs(3) id-rsassa-pkcs1-v1-5-with-sha3-512(16)}
+	oidSignatureRSAWithSHA3_512 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 3, 16}
+	// {joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) sigAlgs(3) id-ml-dsa-44(17)}
+	oidSignatureML_DSA          = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 3, 17}
 	oidSignatureECDSAWithSHA1   = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 1}
 	oidSignatureECDSAWithSHA256 = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 2}
 	oidSignatureECDSAWithSHA384 = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 3}
 	oidSignatureECDSAWithSHA512 = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 4}
+	// {joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) sigAlgs(3) id-ecdsa-with-sha3-256(10)}
+	oidSignatureECDSAWithSHA3_256 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 3, 10}
+	// {joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) sigAlgs(3) id-ecdsa-with-sha3-384(11)}
+	oidSignatureECDSAWithSHA3_384 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 3, 11}
+	// {joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) sigAlgs(3) id-ecdsa-with-sha3-512(12)}
+	oidSignatureECDSAWithSHA3_512 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 3, 12}
 	oidSignatureEd25519         = asn1.ObjectIdentifier{1, 3, 101, 112}
 
+	// https://oid-base.com/get/2.16.840.1.101.3.4.2
 	oidSHA256 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 2, 1}
 	oidSHA384 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 2, 2}
 	oidSHA512 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 2, 3}
+	// {joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) hashAlgs(2) sha3-256(8)
+	oidSHA3_256 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 2, 8}
+	// {joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) hashAlgs(2) sha3-384(9)
+	oidSHA3_384 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 2, 9}
+	// {joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) hashAlgs(2) sha3-512(10)
+	oidSHA3_512 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 2, 10}
 
 	oidMGF1 = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 8}
 
@@ -371,18 +400,30 @@ var signatureAlgorithmDetails = []struct {
 	{MD5WithRSA, "MD5-RSA", oidSignatureMD5WithRSA, asn1.NullRawValue, RSA, crypto.MD5, false},
 	{SHA1WithRSA, "SHA1-RSA", oidSignatureSHA1WithRSA, asn1.NullRawValue, RSA, crypto.SHA1, false},
 	{SHA1WithRSA, "SHA1-RSA", oidISOSignatureSHA1WithRSA, asn1.NullRawValue, RSA, crypto.SHA1, false},
+	// SHA2 / RSA
 	{SHA256WithRSA, "SHA256-RSA", oidSignatureSHA256WithRSA, asn1.NullRawValue, RSA, crypto.SHA256, false},
 	{SHA384WithRSA, "SHA384-RSA", oidSignatureSHA384WithRSA, asn1.NullRawValue, RSA, crypto.SHA384, false},
 	{SHA512WithRSA, "SHA512-RSA", oidSignatureSHA512WithRSA, asn1.NullRawValue, RSA, crypto.SHA512, false},
+	// SHA3 / RSA
+	{SHA3_256WithRSA,"SHA3-256-RSA",oidSignatureRSAWithSHA3_256, asn1.NullRawValue, RSA, crypto.SHA3_256, false},
+	{SHA3_384WithRSA,"SHA3-384-RSA",oidSignatureRSAWithSHA3_384, asn1.NullRawValue, RSA, crypto.SHA3_384, false},
+	{SHA3_512WithRSA,"SHA3-512-RSA",oidSignatureRSAWithSHA3_512, asn1.NullRawValue, RSA, crypto.SHA3_512, false},
+	// RSA / PSS
 	{SHA256WithRSAPSS, "SHA256-RSAPSS", oidSignatureRSAPSS, pssParametersSHA256, RSA, crypto.SHA256, true},
 	{SHA384WithRSAPSS, "SHA384-RSAPSS", oidSignatureRSAPSS, pssParametersSHA384, RSA, crypto.SHA384, true},
 	{SHA512WithRSAPSS, "SHA512-RSAPSS", oidSignatureRSAPSS, pssParametersSHA512, RSA, crypto.SHA512, true},
+
 	{DSAWithSHA1, "DSA-SHA1", oidSignatureDSAWithSHA1, emptyRawValue, DSA, crypto.SHA1, false},
 	{DSAWithSHA256, "DSA-SHA256", oidSignatureDSAWithSHA256, emptyRawValue, DSA, crypto.SHA256, false},
 	{ECDSAWithSHA1, "ECDSA-SHA1", oidSignatureECDSAWithSHA1, emptyRawValue, ECDSA, crypto.SHA1, false},
+	// SHA2 / ECDSA
 	{ECDSAWithSHA256, "ECDSA-SHA256", oidSignatureECDSAWithSHA256, emptyRawValue, ECDSA, crypto.SHA256, false},
 	{ECDSAWithSHA384, "ECDSA-SHA384", oidSignatureECDSAWithSHA384, emptyRawValue, ECDSA, crypto.SHA384, false},
 	{ECDSAWithSHA512, "ECDSA-SHA512", oidSignatureECDSAWithSHA512, emptyRawValue, ECDSA, crypto.SHA512, false},
+	// SHA3 / ECDSA
+	{ECDSAWithSHA3_256, "ECDSA-SHA3-256", oidSignatureECDSAWithSHA3_256, emptyRawValue, ECDSA, crypto.SHA3_256, false},
+	{ECDSAWithSHA3_384, "ECDSA-SHA3-384", oidSignatureECDSAWithSHA3_384, emptyRawValue, ECDSA, crypto.SHA3_384, false},
+	{ECDSAWithSHA3_512, "ECDSA-SHA3-512", oidSignatureECDSAWithSHA3_512, emptyRawValue, ECDSA, crypto.SHA3_512, false},
 	{PureEd25519, "Ed25519", oidSignatureEd25519, emptyRawValue, Ed25519, crypto.Hash(0) /* no pre-hashing */, false},
 }
 
